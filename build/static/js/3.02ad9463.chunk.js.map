{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/Auth/Auth.module.css","containers/Auth/Auth.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_module_css__WEBPACK_IMPORTED_MODULE_1__","_Input_module_css__WEBPACK_IMPORTED_MODULE_1___default","input","props","inputElement","inputClasses","classes","InputElement","validationError","invalid","shouldValidate","touched","push","Invalid","a","createElement","className","ValidationError","elementType","Object","assign","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","module","exports","Auth","state","controls","email","type","placeholder","validation","required","isEmail","valid","password","minLength","verifyPassword","matchPassword","isSignup","formIsValid","inputChangedHandler","event","controlName","updatedControls","C_Users_VRDesktrop_Desktop_ReactJS_BurgerBuilder_burgerbuilder_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","_this","C_Users_VRDesktrop_Desktop_ReactJS_BurgerBuilder_burgerbuilder_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","target","checkValidity","inputID","setState","rules","isValid","trim","length","maxLength","test","submitHandler","preventDefault","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","_this2","formElementsArray","id","config","form","formElement","react__WEBPACK_IMPORTED_MODULE_7___default","_components_UI_Input_Input__WEBPACK_IMPORTED_MODULE_9__","loading","_components_UI_Spinner_Spinner__WEBPACK_IMPORTED_MODULE_11__","errorMessage","error","message","authRedirect","isAuthenticated","react_router_dom__WEBPACK_IMPORTED_MODULE_14__","to","onSubmit","_components_UI_Button_Button__WEBPACK_IMPORTED_MODULE_10__","disabled","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","pass","signingUp","actions"],"mappings":"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","file":"static/js/3.02ad9463.chunk.js","sourcesContent":["import React from 'react';\r\nimport classes from './Input.module.css';\r\n\r\nconst input = (props) => {\r\n\r\n    let inputElement = null;\r\n    const inputClasses = [classes.InputElement];\r\n    let validationError = null;\r\n\r\n    if(props.invalid && props.shouldValidate && props.touched)\r\n    {\r\n        inputClasses.push(classes.Invalid);\r\n        validationError = <p className={classes.ValidationError}>Please enter a valid value!</p>\r\n    }\r\n\r\n    switch(props.elementType) {\r\n        case ('input'):\r\n            inputElement = <input className={inputClasses.join(' ')} {...props.elementConfig} value={props.value}  onChange={props.changed}/>\r\n            break;\r\n        case('textarea'):\r\n            inputElement = <textarea className={inputClasses.join(' ')} {...props.elementConfig} value={props.value} onChange={props.changed}/>\r\n            break;\r\n        case('select'):\r\n            inputElement = (<select className={inputClasses.join(' ')} value={props.value} onChange={props.changed}>{props.elementConfig.options.map(option => (\r\n                <option key={option.value} value={option.value}>{option.displayValue}</option>\r\n            ))}\r\n            </select>);\r\n            break;\r\n        default:\r\n            inputElement = <input className={inputClasses.join(' ')} {...props.elementConfig} value={props.value} onChange={props.changed}/>\r\n            break;\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.Label}>{props.label}</label>\r\n            {inputElement}\r\n            {validationError}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__1X8pw\",\"Label\":\"Input_Label__3JP5i\",\"InputElement\":\"Input_InputElement__LOzED\",\"Invalid\":\"Input_Invalid__1cR9o\",\"ValidationError\":\"Input_ValidationError__J9OpD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__1pmZP\",\"Label\":\"Auth_Label___QhYf\"};","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport classes from './Auth.module.css'\r\nimport * as actions from '../../store/actions/index';\r\nimport {Redirect} from 'react-router-dom';\r\n\r\nclass Auth extends Component {\r\n\r\n    state = {\r\n        controls: {\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Email Address'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type:'password',\r\n                    placeholder: 'Enter Password'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            verifyPassword: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type:'password',\r\n                    placeholder: 'Enter Password Again'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6,\r\n                    matchPassword: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            }\r\n        },\r\n        isSignup: true,\r\n        formIsValid: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        if(!this.props.buildingBurger && this.props.authRedirectPath !== '/')\r\n        {\r\n            this.props.onSetAuthRedirectPath();\r\n        }\r\n    }\r\n\r\n    inputChangedHandler = (event, controlName) => {\r\n        const updatedControls = {\r\n            ...this.state.controls,\r\n            [controlName]: {\r\n                ...this.state.controls[controlName],\r\n                value: event.target.value,\r\n                valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\r\n                touched: true\r\n            }\r\n        };\r\n\r\n        let formIsValid = true;\r\n        for(let inputID in updatedControls)\r\n        {\r\n            if(this.state.isSignup)\r\n                formIsValid = updatedControls[inputID].valid && formIsValid;\r\n            else if(inputID !== 'verifyPassword')\r\n            {\r\n                formIsValid = updatedControls[inputID].valid && formIsValid;\r\n            }\r\n        }\r\n\r\n        this.setState({controls: updatedControls, formIsValid: formIsValid});\r\n    }\r\n\r\n\r\n    // Good idea to share this because it is used in ContactData as well. Export const checkValidity = (value, rules) => {}\r\n    checkValidity = (value, rules) => {\r\n        let isValid = true;\r\n\r\n        if(rules)\r\n        {\r\n            if(rules.required) {\r\n                isValid = value.trim() !== '' && isValid;\r\n            }\r\n    \r\n            if(rules.minLength) {\r\n                isValid = value.length >= rules.minLength && isValid;\r\n            }\r\n    \r\n            if(rules.maxLength)\r\n            {\r\n                isValid = value.length <= rules.maxLength && isValid;\r\n            }\r\n\r\n            if(rules.isEmail)\r\n            {\r\n                const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n                isValid = pattern.test(value) && isValid\r\n            }\r\n\r\n            if(rules.matchPassword)\r\n            {\r\n                isValid = this.state.controls.password.value === value && isValid;\r\n            }\r\n        }\r\n\r\n        \r\n\r\n        return isValid;\r\n    }\r\n\r\n    submitHandler = (event) => {\r\n        event.preventDefault();\r\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\r\n    }\r\n\r\n    switchAuthModeHandler = () => {\r\n\r\n        let formIsValid = true;\r\n        for(let inputID in this.state.controls)\r\n        {\r\n            if(this.state.isSignup)\r\n                formIsValid = this.state.controls[inputID].valid && formIsValid;\r\n            else if(inputID !== 'verifyPassword')\r\n            {\r\n                formIsValid = this.state.controls[inputID].valid && formIsValid;\r\n            }\r\n        }\r\n\r\n        this.setState({formIsValid: formIsValid});\r\n\r\n        this.setState(prevState => {\r\n            return {\r\n                isSignup: !prevState.isSignup,\r\n                formIsValid: formIsValid\r\n            };\r\n        })\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n        const formElementsArray = [];\r\n\r\n        for(let key in this.state.controls) {\r\n            if(key === 'verifyPassword')\r\n            {\r\n                if(this.state.isSignup)\r\n                {\r\n                    formElementsArray.push({\r\n                        id: key,\r\n                        config: this.state.controls[key]\r\n                    })\r\n                }\r\n            }\r\n            else\r\n            {\r\n                formElementsArray.push({\r\n                    id: key,\r\n                    config: this.state.controls[key]\r\n                })\r\n            }\r\n\r\n            \r\n        }\r\n\r\n        let form = formElementsArray.map(formElement => (\r\n            <Input\r\n                key={formElement.id}\r\n                elementType={formElement.config.elementType} \r\n                elementConfig={formElement.config.elementConfig} \r\n                value={formElement.config.value}\r\n                invalid={!formElement.config.valid}\r\n                shouldValidate={formElement.config.validation}\r\n                touched={formElement.config.touched}\r\n                changed={(event) => this.inputChangedHandler(event, formElement.id)}/>\r\n\r\n            \r\n        ));\r\n\r\n        if(this.props.loading) {\r\n            form = <Spinner />\r\n        }\r\n\r\n        let errorMessage = null;\r\n        if(this.props.error) {\r\n            errorMessage = (<p>{this.props.error.message}</p>);\r\n        }\r\n\r\n        let authRedirect = null;\r\n        if(this.props.isAuthenticated)\r\n        {\r\n            authRedirect = <Redirect to={this.props.authRedirectPath}/>\r\n        }\r\n\r\n        return (\r\n            <div className={classes.Auth}>\r\n                {authRedirect}\r\n                {errorMessage}\r\n                <form onSubmit={this.submitHandler}>\r\n                    {form}\r\n                    <Button disabled={!this.state.formIsValid} btnType=\"Success\">{this.state.isSignup ? 'SIGN UP' : 'SIGN IN'}</Button>      \r\n                </form>\r\n\r\n                <p className={classes.Label}>{this.state.isSignup ? 'Already have an account?' : 'Don\\'t have an account?' }</p>\r\n                <Button clicked={this.switchAuthModeHandler} btnType=\"Danger\">{this.state.isSignup ? 'SIGN IN' : 'SIGN UP'}</Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuthenticated: state.auth.token !== null,\r\n        buildingBurger: state.burgerBuilder.building,\r\n        authRedirectPath: state.auth.authRedirectPath\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: (email, pass, signingUp) => dispatch(actions.auth(email, pass, signingUp)),\r\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/')) //Reset path whenever reaching auth page w/o building burger\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);"],"sourceRoot":""}