{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_module_css__WEBPACK_IMPORTED_MODULE_1__","_Input_module_css__WEBPACK_IMPORTED_MODULE_1___default","input","props","inputElement","inputClasses","classes","InputElement","validationError","invalid","shouldValidate","touched","push","Invalid","a","createElement","className","ValidationError","elementType","Object","assign","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","module","exports","CheckoutSummary","ContactData","checkoutSummary","react_default","style","width","margin","Burger","ingredients","bun","bunType","Button","btnType","clicked","checkoutCanceled","checkoutContinued","state","orderForm","name","type","placeholder","validation","required","valid","street","city","country","postalCode","minLength","maxLength","deliveryMethod","paymentMethod","creditCard","formIsValid","orderHanlder","event","preventDefault","formData","formElementID","_this","order","price","seedlessBun","seedless","orderData","userId","onOrderBurger","token","checkValidity","rules","isValid","trim","length","inputChangedHandler","inputID","updatedOrderForm","objectSpread","updatedFormElement","target","setState","_this2","this","formElementsArray","id","config","form","onSubmit","formElement","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","onCheckoutCancelledHandler","history","goBack","onCheckoutContinuedHandler","replace","summary","Redirect","to","ings","purchasedRedirect","purchased","Route","path","match","component"],"mappings":"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","file":"static/js/1.ef893ff8.chunk.js","sourcesContent":["import React from 'react';\r\nimport classes from './Input.module.css';\r\n\r\nconst input = (props) => {\r\n\r\n    let inputElement = null;\r\n    const inputClasses = [classes.InputElement];\r\n    let validationError = null;\r\n\r\n    if(props.invalid && props.shouldValidate && props.touched)\r\n    {\r\n        inputClasses.push(classes.Invalid);\r\n        validationError = <p className={classes.ValidationError}>Please enter a valid value!</p>\r\n    }\r\n\r\n    switch(props.elementType) {\r\n        case ('input'):\r\n            inputElement = <input className={inputClasses.join(' ')} {...props.elementConfig} value={props.value}  onChange={props.changed}/>\r\n            break;\r\n        case('textarea'):\r\n            inputElement = <textarea className={inputClasses.join(' ')} {...props.elementConfig} value={props.value} onChange={props.changed}/>\r\n            break;\r\n        case('select'):\r\n            inputElement = (<select className={inputClasses.join(' ')} value={props.value} onChange={props.changed}>{props.elementConfig.options.map(option => (\r\n                <option key={option.value} value={option.value}>{option.displayValue}</option>\r\n            ))}\r\n            </select>);\r\n            break;\r\n        default:\r\n            inputElement = <input className={inputClasses.join(' ')} {...props.elementConfig} value={props.value} onChange={props.changed}/>\r\n            break;\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.Label}>{props.label}</label>\r\n            {inputElement}\r\n            {validationError}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__1X8pw\",\"Label\":\"Input_Label__3JP5i\",\"InputElement\":\"Input_InputElement__LOzED\",\"Invalid\":\"Input_Invalid__1cR9o\",\"ValidationError\":\"Input_ValidationError__J9OpD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__cfAbw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__3C3C3\",\"Input\":\"ContactData_Input__-QMdF\"};","import React from 'react';\r\nimport classes from './CheckoutSummary.module.css';\r\nimport Button from '../../UI/Button/Button'\r\nimport Burger from '../../Burger/Burger';\r\n\r\n\r\nconst checkoutSummary = (props) => {\r\n    return(\r\n        <div className={classes.CheckoutSummary}>\r\n            <h1>We hope it tastes well!</h1>\r\n            <div style={{width: '100%', margin: 'auto'}}> \r\n                <Burger ingredients={props.ingredients} bun={props.bunType}/>\r\n            </div>\r\n\r\n            <Button btnType=\"Danger\" clicked={props.checkoutCanceled}>CANCEL</Button>\r\n            <Button btnType=\"Success\" clicked={props.checkoutContinued}>CONTINUE</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default checkoutSummary;","import React, {Component} from 'react';\r\nimport Button from \"../../../components/UI/Button/Button\";\r\nimport classes from './ContactData.module.css';\r\nimport axios from '../../../Axios-orders';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport {connect} from 'react-redux';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as actions from '../../../store/actions/index';\r\n\r\nclass ContactData extends Component {\r\n    state = {\r\n        orderForm: {\r\n                name: {\r\n                    elementType: 'input',\r\n                    elementConfig: {\r\n                        type: 'text',\r\n                        placeholder: 'Your Name'\r\n                    },\r\n                    value: '',\r\n                    validation: {\r\n                        required: true\r\n                    },\r\n                    valid: false,\r\n                    touched: false\r\n                },\r\n                street: {\r\n                    elementType: 'input',\r\n                    elementConfig: {\r\n                        type: 'text',\r\n                        placeholder: 'Street Address'\r\n                    },\r\n                    value: '',\r\n                    validation: {\r\n                        required: true\r\n                    },\r\n                    valid: false,\r\n                    touched: false\r\n                },\r\n                city: {\r\n                    elementType: 'input',\r\n                    elementConfig: {\r\n                        type: 'text',\r\n                        placeholder: 'City'\r\n                    },\r\n                    value: '',\r\n                    validation: {\r\n                        required: true\r\n                    },\r\n                    valid: false,\r\n                    touched: false\r\n                },\r\n                state: {\r\n                    elementType: 'select',\r\n                    elementConfig: {\r\n                        options: [\r\n                            {value: 'AK', displayValue: 'AK'},\r\n                            {value: 'AL', displayValue: 'AL'},\r\n                            {value: 'AR', displayValue: 'AR'},\r\n                            {value: 'AZ', displayValue: 'AZ'},\r\n                            {value: 'CA', displayValue: 'CA'},\r\n                            {value: 'CO', displayValue: 'CO'},\r\n                            {value: 'CT', displayValue: 'CT'},\r\n                            {value: 'DC', displayValue: 'DC'},\r\n                            {value: 'DE', displayValue: 'DE'},\r\n                            {value: 'FL', displayValue: 'FL'},\r\n                            {value: 'GA', displayValue: 'GA'},\r\n                            {value: 'HI', displayValue: 'HI'},\r\n                            {value: 'IA', displayValue: 'IA'},\r\n                            {value: 'ID', displayValue: 'ID'},\r\n                            {value: 'IL', displayValue: 'IL'},\r\n                            {value: 'IN', displayValue: 'IN'},\r\n                            {value: 'KS', displayValue: 'KS'},\r\n                            {value: 'KY', displayValue: 'KY'},\r\n                            {value: 'LA', displayValue: 'LA'},\r\n                            {value: 'MA', displayValue: 'MA'},\r\n                            {value: 'MD', displayValue: 'MD'},\r\n                            {value: 'ME', displayValue: 'ME'},\r\n                            {value: 'MI', displayValue: 'MI'},\r\n                            {value: 'MN', displayValue: 'MN'},\r\n                            {value: 'MO', displayValue: 'MO'},\r\n                            {value: 'MS', displayValue: 'MS'},\r\n                            {value: 'MT', displayValue: 'MT'},\r\n                            {value: 'NC', displayValue: 'NC'},\r\n                            {value: 'ND', displayValue: 'ND'},\r\n                            {value: 'NE', displayValue: 'NE'},\r\n                            {value: 'NH', displayValue: 'NH'},\r\n                            {value: 'NJ', displayValue: 'NJ'},\r\n                            {value: 'NM', displayValue: 'NM'},\r\n                            {value: 'NV', displayValue: 'NV'},\r\n                            {value: 'NY', displayValue: 'NY'},\r\n                            {value: 'OH', displayValue: 'OH'},\r\n                            {value: 'OK', displayValue: 'OK'},\r\n                            {value: 'OR', displayValue: 'OR'},\r\n                            {value: 'PA', displayValue: 'PA'},\r\n                            {value: 'RI', displayValue: 'RI'},\r\n                            {value: 'SC', displayValue: 'SC'},\r\n                            {value: 'SD', displayValue: 'SD'},\r\n                            {value: 'TN', displayValue: 'TN'},\r\n                            {value: 'TX', displayValue: 'TX'},\r\n                            {value: 'UT', displayValue: 'UT'},\r\n                            {value: 'VT', displayValue: 'VT'},\r\n                            {value: 'VA', displayValue: 'VA'},\r\n                            {value: 'WA', displayValue: 'WA'},\r\n                            {value: 'WI', displayValue: 'WI'},\r\n                            {value: 'WV', displayValue: 'WV'},\r\n                            {value: 'WY', displayValue: 'WY'},\r\n                            {value: 'OTH', displayValue: 'Other - Not Listed'},\r\n       \r\n                        ]\r\n                    },\r\n                    value: 'AK',\r\n                    valid: true\r\n                },\r\n                country: {\r\n                    elementType: 'input',\r\n                    elementConfig: {\r\n                        type: 'text',\r\n                        placeholder: 'Country'\r\n                    },\r\n                    value: '',\r\n                    validation: {\r\n                        required: true\r\n                    },\r\n                    valid: false,\r\n                    touched: false\r\n                },\r\n                postalCode: {\r\n                    elementType: 'input',\r\n                    elementConfig: {\r\n                        type: 'number',\r\n                        placeholder: 'Zip Code'\r\n                    },\r\n                    value: '',\r\n                    validation: {\r\n                        required: true,\r\n                        minLength: 5,\r\n                        maxLength: 5\r\n                    },\r\n                    valid: false,\r\n                    touched: false\r\n                },\r\n                deliveryMethod: {\r\n                    elementType: 'select',\r\n                    elementConfig: {\r\n                        options: [\r\n                            {value: 'pickup', displayValue: 'Pick Up'},\r\n                            {value: 'cheapest', displayValue: 'Cheapest Delivery'},\r\n                            {value: 'fasest', displayValue: 'Fastest Delivery'}\r\n                        ]\r\n                    },\r\n                    value: 'pickup',\r\n                    valid: true\r\n                },\r\n                paymentMethod: {\r\n                    elementType: 'select',\r\n                    elementConfig: {\r\n                        options: [\r\n                            {value: 'online', displayValue: 'Online (Credit Card)'},\r\n                            {value: 'pay_in_Store', displayValue: 'Pay In Store'},\r\n                        ]\r\n                    },\r\n                    value: 'pay_in_store',\r\n                    valid: true\r\n                },\r\n                creditCard: {\r\n                    elementType: 'input',\r\n                    elementConfig: {\r\n                        type: 'text',\r\n                        placeholder: 'CC #'\r\n                    },\r\n                    value: '',\r\n                    validation: {\r\n                        required: false\r\n                    },\r\n                    valid: true,\r\n                    touched: false\r\n                }\r\n            \r\n        },\r\n        formIsValid: false,\r\n    }\r\n\r\n    orderHanlder = (event) => {\r\n        //Prevents form from reloading the page\r\n        // Extract data wanting to submit (Which is managed with two-way binding)\r\n        event.preventDefault();\r\n\r\n        //this.setState({loading: true});\r\n\r\n        const formData = {};\r\n        //Create Key-Val Pairs\r\n        for(let formElementID in this.state.orderForm)\r\n        {\r\n            formData[formElementID] = this.state.orderForm[formElementID].value;\r\n        }\r\n\r\n        const order = {\r\n            ingredients: this.props.ingredients,\r\n            price: +this.props.price,\r\n            seedlessBun: this.props.seedless,\r\n            orderData: formData,\r\n            userId: this.props.userId\r\n        }\r\n\r\n        this.props.onOrderBurger(order, this.props.token);\r\n\r\n    }\r\n\r\n    checkValidity = (value, rules) => {\r\n        let isValid = true;\r\n\r\n        if(rules)\r\n        {\r\n            if(rules.required) {\r\n                isValid = value.trim() !== '' && isValid;\r\n            }\r\n    \r\n            if(rules.minLength) {\r\n                isValid = value.length >= rules.minLength && isValid;\r\n            }\r\n    \r\n            if(rules.maxLength)\r\n            {\r\n                isValid = value.length <= rules.maxLength && isValid;\r\n            }\r\n        }\r\n\r\n        \r\n\r\n        return isValid;\r\n    }\r\n\r\n    inputChangedHandler = (event, inputID) => {\r\n        const updatedOrderForm = {\r\n            ...this.state.orderForm //Not a deep clone, thanks to nesting\r\n        }\r\n\r\n        const updatedFormElement = { //This deeps clone the next nest layer\r\n            ...updatedOrderForm[inputID]\r\n        }\r\n\r\n        updatedFormElement.value = event.target.value;\r\n        updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\r\n        updatedFormElement.touched = true;\r\n        updatedOrderForm[inputID] = updatedFormElement;\r\n\r\n        //TODO: Add a pay online check to make the requirements change.\r\n\r\n        let formIsValid = true;\r\n        for(let inputID in updatedOrderForm)\r\n        {\r\n            formIsValid = updatedOrderForm[inputID].valid && formIsValid;\r\n        }\r\n\r\n        this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid});\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        const formElementsArray = [];\r\n\r\n        for(let key in this.state.orderForm) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.orderForm[key]\r\n            })\r\n        }\r\n\r\n        let form = (\r\n                <form onSubmit={this.orderHanlder}>\r\n                    {formElementsArray.map(\r\n                        formElement => (\r\n                            <Input key={formElement.id} \r\n                            elementType={formElement.config.elementType} \r\n                            elementConfig={formElement.config.elementConfig} \r\n                            value={formElement.config.value}\r\n                            invalid={!formElement.config.valid}\r\n                            shouldValidate={formElement.config.validation}\r\n                            touched={formElement.config.touched}\r\n                            changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n                            />\r\n                        )\r\n                    )}\r\n                    <Button btnType=\"Success\" disabled={!this.state.formIsValid}>ORDER</Button>\r\n                </form>\r\n\r\n        );\r\n\r\n        if(this.props.loading)\r\n        {\r\n            form = <Spinner/>;\r\n        }\r\n\r\n        return (\r\n            <div className={classes.ContactData}>\r\n                <h4>Enter your Contact Data</h4>\r\n                {form}\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ingredients: state.burgerBuilder.ingredients,\r\n        price: state.burgerBuilder.totalPrice,\r\n        seedless: state.burgerBuilder.seedlessBun,\r\n        loading: state.order.loading,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onOrderBurger: (orderData, token) => dispatch(actions.purchase(orderData, token))\r\n    }\r\n    \r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React, {Component} from 'react';\r\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport ContactData from './ContactData/ContactData';\r\nimport {connect} from 'react-redux';\r\n\r\nclass Checkout extends Component {\r\n\r\n    componentDidMount() {\r\n        //this.props.onInitPurchase();\r\n    }\r\n\r\n    // componentWillMount() {\r\n    //     const query = new URLSearchParams(this.props.location.search);\r\n    //     const ingredients = {};\r\n    //     let price = 0;\r\n    //     let sdless = false;\r\n    //     for(let param of query.entries()) {\r\n    //         if(param[0] === \"price\")\r\n    //         {\r\n    //             price = param[1];\r\n    //         }\r\n    //         else if(param[0] === 'seedless')\r\n    //         {\r\n    //             sdless = (param[1] === \"true\");\r\n    //         }\r\n    //         else\r\n    //         {\r\n    //             ingredients[param[0]] = +param[1];  //+ converts to number\r\n    //         }\r\n            \r\n    //     }\r\n\r\n    //     //Removed UpdateState\r\n    // }\r\n\r\n    onCheckoutCancelledHandler = () => {\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    onCheckoutContinuedHandler = () => {\r\n        this.props.history.replace('/checkout/contact-data');\r\n    }\r\n\r\n    //Thanks to Render Store, don't need price anymore...\r\n\r\n    render() {\r\n        let summary = <Redirect to=\"/\"/>\r\n\r\n        \r\n        if(this.props.ings)\r\n        {\r\n            const purchasedRedirect = this.props.purchased ? (<Redirect to=\"/\"/>) : null;\r\n            summary = (<div>\r\n                {purchasedRedirect}\r\n                <CheckoutSummary ingredients={this.props.ings}\r\n                checkoutCanceled={this.onCheckoutCancelledHandler}\r\n                checkoutContinued={this.onCheckoutContinuedHandler}\r\n                bunType={this.props.seedless}/>)\r\n                <Route path={this.props.match.path + '/contact-data'} component={ContactData}/>\r\n            </div>);\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                {summary}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        seedless: state.burgerBuilder.seedlessBun,\r\n        purchased: state.order.purchased\r\n    };\r\n}\r\n\r\n\r\n\r\nexport default connect(mapStateToProps)(Checkout);\r\n\r\n//Removed:\r\n//render={(props) => (<ContactData ingredients={this.props.ings} seedless={this.props.seedless} price={this.props.totalPrice} {...props}/>)}"],"sourceRoot":""}